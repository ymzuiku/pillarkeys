{
	/*
	// Place your snippets for JavaScript React here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
	"q-dev": {
	"prefix": "q-dev",
	"body": [
	"var dev = process.env.NODE_ENV==='development'"
	],
	"description": "q-dev"
	},
	"me-react": {
		"prefix": "me-react,Session,withTracker",
		"body": [
			"import React from 'react'",
			"import { Session } from 'meteor/session'",
			"import { withTracker } from 'meteor/react-meteor-data'"
		],
		"description": "me-react"
	},
	"me-mongo": {
		"prefix": "me-mongo,meteor,check",
		"body": [
			"import { Meteor } from 'meteor/meteor'",
			"import { Mongo } from 'meteor/mongo'",
			"import { check } from 'meteor/check'"
		],
		"description": "me-mongo"
	},
	"me-meteor": {
		"prefix": "me-meteor",
		"body": [
			"import { Meteor } from 'meteor/meteor'"
		],
		"description": "me-meteor"
	},
	"q-params": {
		"prefix": "q-params",
		"body": [
			"this.params = this.props.match.params"
		],
		"description": "q-params"
	},
	"q-me": {
		"prefix": "q-me",
		"body": [
			"module.exports = "
		],
		"description": "q-me"
	},
	"()=>{}": {
		"prefix": "ww",
		"body": [
			"()=>{}"
		],
		"description": "()=>{}"
	},
	"Print to qconsole": {
		"prefix": "qlog",
		"body": [
			"console.log($1)"
		],
		"description": "Log output to console"
	},
	"q-render()": {
		"prefix": "q-render()",
		"body": [
			"render() {",
				"	return <React.Fragment></React.Fragment>",
			"}"
		],
		"description": "render React.Fragment"
	},
	"Print to console": {
		"prefix": "qog",
		"body": [
			"console.log($1)"
		],
		"description": "Log output to console"
	},
	"new-localhost": {
		"prefix": "new-localhost",
		"body": [
			"function localhost() {",
			"var interfaces = require('os').networkInterfaces()",
			"for (var devName in interfaces) {",
			"var iface = interfaces[devName]",
			"for (var i = 0; i < iface.length; i++) {",
			"var alias = iface[i]",
			"if (alias.family === 'IPv4' && alias.address !== '127.0.0.1' && !alias.internal) {",
			"return alias.address",
			"}",
			"}",
			"}",
			"}"
		],
		"description": "new-localhost"
	},
	"new react class": {
		"prefix": "new react class",
		"body": [
			"let React = require('react')",
			"let { observer } = require('mobx-react')",
			"",
			"class App extends React.PureComponent {",
"	render(){",
"		return <div>app</div>",
"	}",
			"}",
			"",
			"module.exports = observer(App)"
		],
		"description": "new react class"
	},
	"export default": {
		"prefix": "q-ed",
		"body": [
			"export default"
		],
		"description": "export default"
	},
	"new unso": {
		"prefix": "new unso",
		"body": [
			"componentDidMount=()=>{",
			"this.unso = store.subscribe(()=>{})",
			"}",
			"componentWillUnmount=()=>{",
			"this.unso()",
			"}"
		],
		"description": "new unso"
	},
	"background-gradient": {
		"prefix": "background-gradient",
		"body": [
			"backgroundImage:`linear-gradient(90deg,#fff,#00f)`,"
		],
		"description": "background-gradient"
	}
}